```scala
lazy val primes:Stream[BigInt] = {
  def nthPrimes(n:Int):Stream[BigInt] =
  	if(n<=0) primes(0) #:: nthPrimes(1)
  	else if(n==1) 3 #:: nthPrimes(2)
  	else {
  		val primesSoFar = primes take n-1
  		odds(primes(n-1)).filter(
  		x => primesSoFar.forall(x % _ != 0) )
  	}
  nthPrimes(0)
}

def incBy2(x:BigInt):Stream[BigInt] = x #:: odds(x+2)

lazy val primes:Stream[BigInt] = {
  def primesWithPrimes(nums:Stream[BigInt], primesSoFar:List[BigInt]):Stream[BigInt]	= 
  	nums.head #:: primesWithPrimes( nums.tail.filter( 
  		x => primesSoFar.forall(x % _ != 0)), nums.head :: primesSoFar ) 

  2 #:: primesWithPrimes(incBy2(BigInt(3)), List(BigInt(2)))
}

def ints(n: BigInt): Stream[BigInt] = n #:: ints(n+1)

lazy val primes = {
  def incBy2(x:BigInt):Stream[BigInt] = x #:: odds(x+2)
  
  def primesFun(nums: Stream[BigInt]): Stream[BigInt] =
      nums.head #:: primesFun ((nums tail) filter (x => x % nums.head != 0))

    2 #:: primesFun(incBy2(3))
}
```

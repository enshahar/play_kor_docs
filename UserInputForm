이제 목록을 표시하는 작업은 되었지만, 해야할 일이 많다. 예제 데이터를 보여주는 것 말고, 사용자(관리자)가 데이터를 입력할 수 있어야 한다. 

# 데이터 입력 폼

사용자 입력은 아다시피 html 폼(form)을 사용한다. 폼을 다룰 경우 다음과 같은 단계를 거쳐야 한다.

* 사용자 입력을 위한 빈 폼을 표시한다.
* 사용자가 데이터를 입력하고 submit을 누르면 POST(또는 GET)된 데이터의 적합성을 검사하고, 오류가 있으면 다시 표시해야 한다. 
* 적합성 검사를 통과하면 데이터를 객체에 담아 데이터베이스(또는 ORM)를 사용해 저장해야 한다.

빈 폼은 직접(HTML로) 만들 수 있다. 하지만, submit시 적합성 검사가 실패한 경우 다시 입력화면으로 전환되어야 하는데, 이때 필드에는 사용자가 이미 입력한 값과 왜 재 입력이 필요한지 오류 메시지가 표시되는 편이 좋다. 그 후 다시 객체에 담아 DB/ORM으로 전달하면 된다.

이를 직접 손으로 구현한다고 보자. 다음과 같은 일을 해야 할 것이다.

* 폼 표시시: 입력 태그를 HTML로 표시하고, 거기 적절한 이름(name 애트리뷰트)과 값(value 애트리뷰트)를 지정해야 한다. 새로 입력하는 경우는 값이 비어있지만, 사용자 입력에 잘못된 부분이 있어서 오류를 표시하고 돌아온 경우이거나, 기존 데이터를 수정하는 경우라면 각각 기존 입력 값(HTTP POST 데이터)이나 데이터베이스에서 가져온 모델 객체의 필드 값을 표시해야 한다.

* 폼 제출시: 제출 버튼을 누르면 데이터 무결성을 체크하고, 폼 액션을 수행해야 한다. 이때 폼 액션을 받는 URL에 매핑된 컨트롤러 함수에서는 거꾸로 POST된 데이터에서 데이터베이스 모델 객체에 값을 저장해 데이터베이스에 넣거나 관련 비즈니스 로직을 수행해야 한다.

이런 맵핑을 하려면 결국 폼의 필드들과 그에 대응하는 모델 객체의 필드/애트리뷰트 간에 연관을 시켜줘야 한다. 일반적으로 어떤 객체가 있을 때 그로부터 이런 맵핑을 만들 수 있는 방법은 다음과 같은 것들이 있다.

1. 리플랙션 등 객체/클래스 정보를 얻어올 수 있는 기능을 사용해 필드 이름 등을 가져온다.
2. 사용자가 맵핑을 지정하고, 그를 활용한다.
3. 프로그래머가 직접 코드를 작성한다.

가장 간편한 것은 1의 방법을 사용하는 것이다. 기본적으로 리플렉션을 사용해 디폴트 연동이 가능하게 하고, 프로그래머가 약간의 변경을 가할 수 있게 해주면 좋을 것이다. 하지만, 아직 스칼라에 리플렉션이 도입된 지 얼마 안되서 이런 부분은 플레이에 반영되어 있지 않은 모양이다. 어쩔 수 없이 2번 방법을 사용해야 한다.

## 폼이 하는 일

매핑시 필요한 변환을 잘 생각해 보자.

1. 객체 -> 폼 변환시 : 객체의 각 필드로부터 폼의 입력 데이터를 채워넣을 수 있어야 한다. 예를 들어 `<input type="text" name="logingname" value=""/>`라는 필드에 대한 값을  `User`의 인스턴스 `u`로부터 가져오려면, `u.loginname`을 `loginname`이르는 `text` 타입의 입력필드의 `value` 애트리뷰트에 넣어야 한다. 
 
2. 폼 -> 객체 변환시 : 위 1의 역 과정이다.

플레이의 `play.api.data`에는 이런 과정을 처리하기 위한 폼 데이터 타입이 정의되어 있다.
(자세한 것은 [폼 튜플 처리에 대한 내 글](http://enshahar.com/2013/02/17/form-처리에-대해-폼-튜플-처리/)을 보라)

```scala
  val userForm = Form(
    mapping(
      "id" -> optional(longNumber),
      "loginname" -> nonEmptyText
      "name" -> nonEmptyText,
      "mobile" -> text
    )(User.apply, User.unapply)
  )  
```

